class Solution:
    def longestPalindrome(self, s: str) -> str:
        # Transform the input string by inserting special characters ('#')
        transformed_s = '#' + '#'.join(s) + '#'
        
        n = len(transformed_s)
        p = [0] * n  # Array to store lengths of palindromes around each center
        center = 0   # Center of the current rightmost palindrome
        right = 0    # Right boundary of the current rightmost palindrome
        
        max_len = 0  # Length of the longest palindrome found
        start = 0    # Start index of the longest palindrome found
        
        for i in range(n):
            mirror = 2 * center - i
            
            if i < right:
                p[i] = min(right - i, p[mirror])
            
            # Attempt to expand palindrome centered at i
            while i + p[i] + 1 < n and i - p[i] - 1 >= 0 and transformed_s[i + p[i] + 1] == transformed_s[i - p[i] - 1]:
                p[i] += 1
            
            # Update center and right boundary if current palindrome extends past right boundary
            if i + p[i] > right:
                center = i
                right = i + p[i]
            
            # Update longest palindrome found
            if p[i] > max_len:
                max_len = p[i]
                start = (i - p[i]) // 2
        
        return s[start:start + max_len]
